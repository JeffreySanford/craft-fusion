/* Prevent horizontal overflow on html and body */
html, body {
  width: 100%;
  height: 100vh;
  overflow-x: hidden;
  overflow-y: hidden;
}

/* Root app container: full viewport, column layout */
.app-container {
  display: flex;
  flex-direction: column;
  height: calc(100vh - 0.75em);
  width: 100%;
  /* Remove max-width and margin-right to prevent overflow */
  overflow: hidden;
  position: relative;
  box-sizing: border-box;
}

/* Header always at the top */
app-header {
  width: 100%;
  flex-shrink: 0;
  box-sizing: border-box;
}

/* Main layout: sidebar + main-stage in a flex row */
.layout-container {
  display: flex;
  flex-direction: row;
  flex: 1 1 0;
  width: 100%;
  min-width: 0;
  min-height: 0;
  max-height: 100%;
  align-items: stretch;
  box-sizing: border-box;
  column-gap: 1em; // 1em gutter between sidebar and main-stage
}

/* Sidebar: fixed width, full height of layout-container */
.sidebar {
  flex: 0 0 18em;
  display: flex;
  flex-direction: column;
  height: 75% !important;
  max-height: 75vh !important;
  box-sizing: border-box;
  transition: flex-basis 0.3s, width 0.3s;
}

.sidebar.collapsed {
  flex-basis: 0 !important;
  width: 0 !important;
  min-width: 0 !important;
  max-width: 0 !important;
  overflow: hidden;
  padding: 0 !important;
  margin: 0 !important;
}

/* Main-stage: fills remaining space, full height of layout-container */
.main-stage, .router-content-wrapper {
  flex: 1 1 0;
  min-width: 0;
  height: 100%;
  max-height: 100%;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  background: transparent;
  box-sizing: border-box;
  transition: flex-basis 0.3s, width 0.3s;
}

.main-stage.sidebar-collapsed {
  flex: 1 1 100%;
  width: 100% !important;
  max-width: 100% !important;
}

.router-content-wrapper {
  flex: 1 1 0;
  display: flex;
  flex-direction: column;
  height: 100%;
  box-sizing: border-box;
  // Remove width/max-width to allow main-stage to fully expand
}

/* Footer always at the bottom, styled like header */
app-footer {
  width: 100%;
  flex-shrink: 0;
  box-sizing: border-box;
}

#background-video {
  position: fixed;
  right: 0;
  bottom: 0;
  width: 100vw;
  height: 100vh;
  object-fit: cover;
  z-index: -1;
  opacity: 0.5;
  overflow: hidden;
  transform: scale(1.2);
}

// Define variables for clarity when footer is expanded.
// These can be defined on :root or a more specific common ancestor like .app-container.
:root {
  --footer-expanded-effective-height: 15em; /* This variable now represents the "size of the footer expanded height" you asked about. */
  --main-content-target-vh-when-footer-expanded: 70vh;
  --calculated-layout-height-footer-expanded: calc(var(--main-content-target-vh-when-footer-expanded) - var(--footer-expanded-effective-height));
}

// This rule provides a base lime border.
// The border for .layout-container.footer-expanded will be overridden by the more specific rule below.
.main-stage.footer-expanded,
.layout-container.footer-expanded, /* Will have its border overridden by the pink one below */
.router-content-wrapper.footer-expanded {
  max-height: calc(85vh - 15em) !important;
}

// Control the height of the layout-container when the footer is expanded.
// .main-stage and .router-content-wrapper will adjust their height automatically
// due to their `height: 100%` style, inheriting the new constrained height.
.layout-container.footer-expanded {
  height: var(--calculated-layout-height-footer-expanded) !important;
  max-height: var(--calculated-layout-height-footer-expanded) !important;
}
