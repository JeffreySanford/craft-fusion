// Core mixins for the application
@use 'sass:map';
@use 'variables' as vars;

// Card styling with hover effect
@mixin card($bg-color, $border-color) {
  background: linear-gradient(to bottom right, rgba($bg-color, 0.8), rgba(map.get(vars.$core-theme, primary-white), 0.9));
  border-radius: map.get(vars.$border-radius, md);
  box-shadow: map.get(vars.$shadows, lg);
  overflow: hidden;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  position: relative;
  
  &:hover {
    transform: translateY(-0.3125em);
    box-shadow: 0 0.75em 1.25em rgba(0, 0, 0, 0.2);
  }
}

// Card header
@mixin card-header($bg-color, $border-color) {
  background: linear-gradient(90deg, $bg-color, color.adjust($bg-color, $lightness: -10%));
  color: map.get(vars.$core-theme, primary-white);
  padding: map.get(vars.$spacing, sm);
  border-bottom: 0.1875em solid $border-color;
}

// Card content
@mixin card-content {
  padding: map.get(vars.$spacing, sm);
}

// Detail item with icon
@mixin detail-item {
  display: flex;
  align-items: center;
  margin-bottom: map.get(vars.$spacing, sm);
  transition: all 0.3s ease;
  border-radius: map.get(vars.$border-radius, sm);
  padding: map.get(vars.$spacing, xs);
  
  &:hover {
    background-color: rgba(map.get(vars.$core-theme, patriotic-blue), 0.05);
    transform: translateX(5px);
    
    mat-icon {
      transform: scale(1.2);
      color: map.get(vars.$core-theme, patriotic-red);
    }
  }
}

// Patriotic table styling
@mixin patriotic-table {
  width: 100%;
  border-collapse: collapse;
  margin: map.get(vars.$spacing, sm) 0;
  border-radius: map.get(vars.$border-radius, sm);
  overflow: hidden;
  box-shadow: map.get(vars.$shadows, sm);
  border-spacing: 0;
  
  th {
    background: linear-gradient(180deg, map.get(vars.$core-theme, patriotic-blue), 
      color.adjust(map.get(vars.$core-theme, patriotic-blue), $lightness: -10%));
    color: map.get(vars.$core-theme, primary-white);
    font-size: map.get(vars.$font-sizes, xs);
    font-weight: 500;
    padding: map.get(vars.$spacing, xs);
    text-align: left;
    position: relative;
    overflow: hidden;
    line-height: 1.2;
  }
  
  td {
    padding: map.get(vars.$spacing, xs);
    text-align: left;
    border-bottom: 1px solid rgba(0, 0, 0, 0.08);
    font-size: map.get(vars.$font-sizes, xs);
    line-height: 1.2;
  }
  
  tr:nth-child(odd) {
    background: linear-gradient(
      to right,
      rgba(map.get(vars.$core-theme, patriotic-blue), 0.03) 0%,
      rgba(map.get(vars.$core-theme, patriotic-blue), 0.06) 50%,
      rgba(map.get(vars.$core-theme, patriotic-blue), 0.03) 100%
    );
  }
  
  tr:nth-child(even) {
    background: linear-gradient(
      to right,
      rgba(map.get(vars.$core-theme, patriotic-red), 0.03) 0%,
      rgba(map.get(vars.$core-theme, patriotic-red), 0.06) 50%,
      rgba(map.get(vars.$core-theme, patriotic-red), 0.03) 100%
    );
  }
  
  tr:hover {
    background-color: rgba(map.get(vars.$core-theme, patriotic-blue), 0.1);
    transition: all 0.3s ease;
    transform: translateX(0.1875em);
    box-shadow: -0.1875em 0 0 map.get(vars.$core-theme, patriotic-red);
  }
}

// Button styling
@mixin button($bg-color) {
  background-color: $bg-color;
  color: map.get(vars.$core-theme, primary-white);
  padding: map.get(vars.$spacing, sm) map.get(vars.$spacing, md);
  border-radius: map.get(vars.$border-radius, sm);
  font-size: map.get(vars.$font-sizes, xs);
  font-weight: 500;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: map.get(vars.$spacing, md);
  transition: background-color 0.3s ease, transform 0.3s ease;
  box-shadow: map.get(vars.$shadows, sm);
  position: relative;
  overflow: hidden;
  
  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      to right,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    transition: all 0.6s;
  }
  
  &:hover::after {
    left: 100%;
  }
  
  &:hover {
    background-color: color.adjust($bg-color, $lightness: -10%);
    transform: translateY(-0.125em);
    box-shadow: map.get(vars.$shadows, md);
  }
}

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == "small" {
    @media (max-width: 500px) { @content; }
  } @else if $breakpoint == "medium" {
    @media (max-width: 768px) { @content; }
  } @else if $breakpoint == "large" {
    @media (max-width: 1200px) { @content; }
  }
}
