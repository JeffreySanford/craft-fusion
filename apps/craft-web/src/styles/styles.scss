@use '@angular/material' as mat;
@use './variables' as vars;
@use './transition-variables' as transitions;
@use './reset';
@use './animations';
@use './layout';
@use './utilities';
@use './scrollbar';
@use './md3-components';
@use './material-overrides';
@use 'sass:map';
@use './_theme' as theme;
@use './theme' as theme;

// Core Angular Material styles

// Include the common styles for Angular Material
@include mat.core();

// Apply the Angular Material theme
@include mat.all-component-themes(theme.$craft-fusion-theme);

// Include utility styles
@include vars.color-utilities;
@include vars.spacing-utilities;

// Light/dark theme setup
.light-theme {
  /* Light theme variables */
  --background: #{vars.$light-bg};
  --surface: #{vars.$light-surface};
  --text-primary: #{vars.$light-text-primary};
  --text-secondary: #{vars.$light-text-secondary};
  @include mat.all-component-colors(theme.$craft-fusion-light-theme);

  // Light theme custom variables
  --background: #{vars.$light-bg};
  --surface: #{vars.$light-surface};
  --text-primary: #{vars.$light-text-primary};
  --text-secondary: #{vars.$light-text-secondary};
  

  // Dark theme
.dark-theme {
  @include mat.all-component-colors(theme.$craft-fusion-dark-theme);

  // Dark theme custom variables
  --background: #{vars.$dark-bg};
  --surface: #{vars.$dark-surface};
  --text-primary: #{vars.$dark-text-primary};
  --text-secondary: #{vars.$dark-text-secondary};
}

  // Patriotic theme
}

.dark-theme {
  @include mat.all-component-colors(theme.$craft-fusion-dark-theme);
  
  // Dark theme custom variables
  --background: #{vars.$dark-bg};
  --surface: #{vars.$dark-surface};
  --text-primary: #{vars.$dark-text-primary};
  --text-secondary: #{vars.$dark-text-secondary};
}

// Patriotic theme
.usa-theme {
  @include theme.patriotic-theme();
  
  // Add patriotic theme variables
  --usa-blue: #002868;
  --usa-red: #bf0a30;
  --usa-white: #ffffff;
  --usa-gold: #ffd700;
}

// Global styles
html, body {
  height: 100%;
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}

body {
  background-color: var(--background, #ffffff);
  color: var(--text-primary, rgba(0, 0, 0, 0.87));
}

// Define CSS variables from our SCSS variables
:root {
  // Primary colors
  --md-sys-color-primary: #{map.get(vars.$md-sys-color, primary)};
  --md-sys-color-on-primary: #{map.get(vars.$md-sys-color, on-primary)};
  --md-sys-color-primary-container: #{map.get(vars.$md-sys-color, primary-container)};
  --md-sys-color-on-primary-container: #{map.get(vars.$md-sys-color, on-primary-container)};
  
  // Secondary colors
  --md-sys-color-secondary: #{map.get(vars.$md-sys-color, secondary)};
  --md-sys-color-on-secondary: #{map.get(vars.$md-sys-color, on-secondary)};
  --md-sys-color-secondary-container: #{map.get(vars.$md-sys-color, secondary-container)};
  --md-sys-color-on-secondary-container: #{map.get(vars.$md-sys-color, on-secondary-container)};
  
  // Tertiary colors
  --md-sys-color-tertiary: #{map.get(vars.$md-sys-color, tertiary)};
  --md-sys-color-on-tertiary: #{map.get(vars.$md-sys-color, on-tertiary)};
  --md-sys-color-tertiary-container: #{map.get(vars.$md-sys-color, tertiary-container)};
  --md-sys-color-on-tertiary-container: #{map.get(vars.$md-sys-color, on-tertiary-container)};
  
  // Surface colors
  --md-sys-color-surface: #{map.get(vars.$md-sys-color, surface)};
  --md-sys-color-on-surface: #{map.get(vars.$md-sys-color, on-surface)};
  --md-sys-color-surface-variant: #{map.get(vars.$md-sys-color, surface-variant)};
  --md-sys-color-on-surface-variant: #{map.get(vars.$md-sys-color, on-surface-variant)};
  
  // Background colors
  --md-sys-color-background: #{map.get(vars.$md-sys-color, background)};
  --md-sys-color-on-background: #{map.get(vars.$md-sys-color, on-background)};
  
  // Error colors
  --md-sys-color-error: #{map.get(vars.$md-sys-color, error)};
  --md-sys-color-on-error: #{map.get(vars.$md-sys-color, on-error)};
  --md-sys-color-error-container: #{map.get(vars.$md-sys-color, error-container)};
  --md-sys-color-on-error-container: #{map.get(vars.$md-sys-color, on-error-container)};
  
  // Outline colors
  --md-sys-color-outline: #{map.get(vars.$md-sys-color, outline)};
  --md-sys-color-outline-variant: #{map.get(vars.$md-sys-color, outline-variant)};
  
  // Font families
  --font-roboto: 'Roboto', sans-serif;
  --font-primary: var(--font-roboto);
  
  // Import additional font variables as needed
  // ...existing code...
}

// Import Google Fonts (Add necessary fonts here)
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap');

// Add any global styles here that aren't covered in the partial files
body, html {
  background-color: var(--md-sys-color-background);
  color: var(--md-sys-color-on-background);
  overflow-x: hidden;
  position: relative;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

/* === Background Video === */
#background-video {
  position: fixed;
  inset: -2em -2em 0 -2em;
  min-height: 100%;
  width: 100vw;
  height: auto;
  z-index: -1;
  opacity: 0.4;
  filter: grayscale(50%) blur(0.2em);
  object-fit: cover;
  transform: scale(1.1);
  overflow: hidden;
}

// Component-specific styles that don't fit in the partials
.book-content, .chat-content {
  font-family: var(--font-merriweather);
}

.table-data {
  font-family: var(--font-roboto);
}

// Text alignments
.text-left { text-align: left; }
.font-bold { font-weight: 700; }
.font-medium { font-weight: 500; }
.font-regular { font-weight: 400; }
.font-light { font-weight: 300; }