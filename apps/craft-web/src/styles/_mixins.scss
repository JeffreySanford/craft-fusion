// Core mixins for the application
@use '../variables' as vars;
@use 'sass:map';
@use 'sass:math';

// Display mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Spacing mixins
@mixin padding($space) {
  padding: map.get(vars.$spacing, $space);
}

@mixin padding-x($space) {
  padding-left: map.get(vars.$spacing, $space);
  padding-right: map.get(vars.$spacing, $space);
}

@mixin padding-y($space) {
  padding-top: map.get(vars.$spacing, $space);
  padding-bottom: map.get(vars.$spacing, $space);
}

@mixin margin($space) {
  margin: map.get(vars.$spacing, $space);
}

@mixin margin-x($space) {
  margin-left: map.get(vars.$spacing, $space);
  margin-right: map.get(vars.$spacing, $space);
}

@mixin margin-y($space) {
  margin-top: map.get(vars.$spacing, $space);
  margin-bottom: map.get(vars.$spacing, $space);
}

// Responsive mixins
@mixin respond-to($breakpoint) {
  $value: map.get(vars.$breakpoints, $breakpoint);
  
  @if $value {
    @media (min-width: $value) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint: #{$breakpoint}. Available breakpoints: #{map.keys(vars.$breakpoints)}";
  }
}

// Typography mixins
@mixin font-size($size) {
  font-size: map.get(vars.$font-sizes, $size);
}

@mixin text-style($style) {
  @if $style == 'h1' {
    font-family: map.get(vars.$font-families, 'playfair');
    font-size: map.get(vars.$font-sizes, '4xl');
    font-weight: 700;
    line-height: 1.2;
  } @else if $style == 'h2' {
    font-family: map.get(vars.$font-families, 'merriweather');
    font-size: map.get(vars.$font-sizes, '3xl');
    font-weight: 700;
    line-height: 1.2;
  } @else if $style == 'body' {
    font-family: map.get(vars.$font-families, 'roboto-flex');
    font-size: map.get(vars.$font-sizes, 'base');
    font-weight: 400;
    line-height: 1.5;
  }
  // Add more styles as needed
}

// Card mixins
@mixin card($elevation: 1, $radius: 'md') {
  background-color: var(--md-sys-color-surface);
  border-radius: map.get(vars.$border-radius, $radius);
  box-shadow: var(--md-sys-elevation-level#{$elevation});
  overflow: hidden;
}

// Patriotic styling mixins
@mixin patriotic-gradient($angle: 135deg) {
  background: linear-gradient(
    $angle,
    var(--md-sys-color-primary) 0%,
    var(--md-sys-color-secondary) 100%
  );
  color: var(--md-sys-color-on-primary);
}

@mixin patriotic-border($width: 2px) {
  border-left: $width solid var(--md-sys-color-primary);
  border-right: $width solid var(--md-sys-color-secondary);
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: $width;
    background-color: var(--md-sys-color-tertiary);
  }
}

// Animation mixins
@mixin animate($property, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

@mixin hover-effect($scale: 1.05, $shadow-level: 2) {
  @include animate(transform box-shadow);
  
  &:hover {
    transform: scale($scale);
    box-shadow: var(--md-sys-elevation-level#{$shadow-level});
  }
}

// Layout mixins
@mixin container($max-width: 'xl') {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: map.get(vars.$spacing, 4);
  padding-right: map.get(vars.$spacing, 4);
  
  @if map.has-key(vars.$container-max-widths, $max-width) {
    max-width: map.get(vars.$container-max-widths, $max-width);
  } @else {
    max-width: $max-width;
  }
}

@mixin grid($columns: 12, $gap: 4) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: map.get(vars.$spacing, $gap);
}

// Truncate text with ellipsis
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Accessibility mixins
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin focus-outline($color: 'primary', $width: 2px, $offset: 2px) {
  outline: $width solid var(--md-sys-color-#{$color});
  outline-offset: $offset;
}

// Create focus styles that only appear for keyboard navigation
@mixin focus-visible {
  &:focus-visible {
    @content;
  }
}