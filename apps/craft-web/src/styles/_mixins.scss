// Responsive mixins
@mixin mobile {
  @media (max-width: 576px) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: 577px) and (max-width: 991px) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: 992px) {
    @content;
  }
}

// Flexbox mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Animation mixins
@mixin fade-in($duration: 0.3s) {
  animation: fadeIn $duration ease-in-out;
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
}

@mixin slide-in($direction: 'left', $distance: 20px, $duration: 0.3s) {
  $start-x: 0;
  $start-y: 0;
  
  @if $direction == 'left' {
    $start-x: -$distance;
  } @else if $direction == 'right' {
    $start-x: $distance;
  } @else if $direction == 'up' {
    $start-y: $distance;
  } @else if $direction == 'down' {
    $start-y: -$distance;
  }
  
  animation: slideIn $duration ease-out;
  
  @keyframes slideIn {
    from {
      transform: translate($start-x, $start-y);
      opacity: 0;
    }
    to {
      transform: translate(0, 0);
      opacity: 1;
    }
  }
}

// Layout and positioning mixins
@mixin page-layer {
  position: relative;
  z-index: 1;
}

@mixin animation-background {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
  pointer-events: none; // Allows clicking through to elements behind
}

@mixin stacked-layout {
  position: relative;
  overflow: hidden;
  min-height: 100vh;
}

// Card mixin
@mixin card {
  background-color: var(--md-sys-color-surface);
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  padding: 1rem;
}

// Patriotic theme mixins
@mixin patriotic-border {
  border-left: 4px solid transparent;
  border-image: linear-gradient(
    to bottom,
    var(--md-sys-color-primary),
    var(--md-sys-color-primary) 33%,
    var(--md-sys-color-secondary) 33%,
    var(--md-sys-color-secondary) 67%,
    var(--md-sys-color-tertiary) 67%,
    var(--md-sys-color-tertiary) 100%
  );
  border-image-slice: 1;
}

// Core mixins for the application
@use '../variables' as vars;
@use 'sass:map';
@use 'sass:math';

// Display mixins
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Spacing mixins
@mixin padding($space) {
  padding: map.get(vars.$spacing, $space);
}

@mixin padding-x($space) {
  padding-left: map.get(vars.$spacing, $space);
  padding-right: map.get(vars.$spacing, $space);
}

@mixin padding-y($space) {
  padding-top: map.get(vars.$spacing, $space);
  padding-bottom: map.get(vars.$spacing, $space);
}

@mixin margin($space) {
  margin: map.get(vars.$spacing, $space);
}

@mixin margin-x($space) {
  margin-left: map.get(vars.$spacing, $space);
  margin-right: map.get(vars.$spacing, $space);
}

@mixin margin-y($space) {
  margin-top: map.get(vars.$spacing, $space);
  margin-bottom: map.get(vars.$spacing, $space);
}

// Responsive mixins
@mixin respond-to($breakpoint) {
  $value: map.get(vars.$breakpoints, $breakpoint);
  
  @if $value {
    @media (min-width: $value) {
      @content;
    }
  } @else {
    @error "Unknown breakpoint: #{$breakpoint}. Available breakpoints: #{map.keys(vars.$breakpoints)}";
  }
}

// Typography mixins
@mixin font-size($size) {
  font-size: map.get(vars.$font-sizes, $size);
}

@mixin text-style($style) {
  @if $style == 'h1' {
    font-family: map.get(vars.$font-families, 'playfair');
    font-size: map.get(vars.$font-sizes, '4xl');
    font-weight: 700;
    line-height: 1.2;
  } @else if $style == 'h2' {
    font-family: map.get(vars.$font-families, 'merriweather');
    font-size: map.get(vars.$font-sizes, '3xl');
    font-weight: 700;
    line-height: 1.2;
  } @else if $style == 'body' {
    font-family: map.get(vars.$font-families, 'roboto-flex');
    font-size: map.get(vars.$font-sizes, 'base');
    font-weight: 400;
    line-height: 1.5;
  }
  // Add more styles as needed
}

// Card mixins
@mixin card($elevation: 1, $radius: 'md') {
  background-color: var(--md-sys-color-surface);
  border-radius: map.get(vars.$border-radius, $radius);
  box-shadow: var(--md-sys-elevation-level#{$elevation});
  overflow: hidden;
}

// Patriotic styling mixins
@mixin patriotic-gradient($angle: 135deg) {
  background: linear-gradient(
    $angle,
    var(--md-sys-color-primary) 0%,
    var(--md-sys-color-secondary) 100%
  );
  color: var(--md-sys-color-on-primary);
}

@mixin patriotic-border($width: 2px) {
  border-left: $width solid var(--md-sys-color-primary);
  border-right: $width solid var(--md-sys-color-secondary);
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: $width;
    background-color: var(--md-sys-color-tertiary);
  }
}

// Animation mixins
@mixin animate($property, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

@mixin hover-effect($scale: 1.05, $shadow-level: 2) {
  @include animate(transform box-shadow);
  
  &:hover {
    transform: scale($scale);
    box-shadow: var(--md-sys-elevation-level#{$shadow-level});
  }
}

// Layout mixins
@mixin container($max-width: 'xl') {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: map.get(vars.$spacing, 4);
  padding-right: map.get(vars.$spacing, 4);
  
  @if map.has-key(vars.$container-max-widths, $max-width) {
    max-width: map.get(vars.$container-max-widths, $max-width);
  } @else {
    max-width: $max-width;
  }
}

@mixin grid($columns: 12, $gap: 4) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: map.get(vars.$spacing, $gap);
}

// Truncate text with ellipsis
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Accessibility mixins
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin focus-outline($color: 'primary', $width: 2px, $offset: 2px) {
  outline: $width solid var(--md-sys-color-#{$color});
  outline-offset: $offset;
}

// Create focus styles that only appear for keyboard navigation
@mixin focus-visible {
  &:focus-visible {
    @content;
  }
}