{
  "name": "craft-fusion",
  "version": "1.0.0",
  "license": "MIT",
  "private": true,
  "scripts": {
    "prestart": "./convert_shapefiles.sh",
    "start": "ng serve ",
    "lint": "eslint . --ext .ts,.js,.html && stylelint \"**/*.scss\"",
    "start:all": "npx concurrently \"npx nx run craft-nest:serve\" \"npx nx run craft-web:serve \" \"npx nx run craft-go:serve\"",
    "pm2:start": "pm2 start ecosystem.config.js",
    "pm2:stop": "pm2 stop all",
    "pm2:restart": "pm2 restart all",
    "pm2:logs": "pm2 logs",
    "pm2:monitor": "pm2 monit",
    "pm2:build": "npx nx build craft-nest --configuration=production && npx nx build craft-go --configuration=production",
    "test:backends": "bash ./scripts/test-backends.sh",
    "test:apis": "npm run test:backends",
    "deploy:frontend": "bash ./scripts/deploy-frontend.sh",
    "build:prod": "rm -rf dist && npx nx run craft-web:build --configuration=production",
    "test:frontend": "curl -I http://jeffreysanford.us && curl -I http://jeffreysanford.us/api/health",
    "nginx:test": "bash ./scripts/nginx-test.sh",
    "nginx:reload": "sudo nginx -t && sudo nginx -s reload",
    "nginx:restart": "sudo systemctl restart nginx",
    "nginx:status": "sudo systemctl status nginx",
    "nginx:logs": "sudo tail -f /var/log/nginx/access.log",
    "deploy:full": "npm run pm2:build && npm run deploy:frontend && npm run pm2:restart",
    "postinstall": "npx puppeteer browsers install chrome",
    "security:scan": "semgrep --config=auto apps/ libs/",
    "security:scan:json": "semgrep --config=auto --json apps/ libs/ > security-report.json",
    "security:scan:affected": "nx affected --target=security-scan",
    "security:ci": "semgrep --config=p/security-audit --config=p/typescript --config=p/javascript apps/ libs/ --json --output=semgrep-results.json",
    "install-deps": "npm install --save-dev @angular-eslint/eslint-plugin @angular-eslint/eslint-plugin-template @angular-eslint/template-parser eslint-plugin-import eslint-plugin-nestjs eslint-plugin-rxjs @ngrx/eslint-plugin",
    "sast": "npm run sast:eslint && npm run sast:semgrep:basic",
    "sast:eslint": "nx run-many --target=lint --all",
    "sast:eslint:simple": "npx eslint \"apps/**/*.{ts,tsx}\" \"libs/**/*.{ts,tsx}\" --max-warnings=100",
    "sast:semgrep": "npm run sast:semgrep:check && npm run sast:semgrep:run",
    "sast:semgrep:check": "node -e \"const { execSync } = require('child_process'); const paths = ['semgrep', 'C:\\\\Users\\\\jeffr\\\\AppData\\\\Roaming\\\\Python\\\\Python313\\\\Scripts\\\\semgrep.exe']; let found = false; for (const path of paths) { try { execSync(`\\\"${path}\\\" --version`, { stdio: 'pipe' }); console.log(`✅ Semgrep found at: ${path}`); found = true; break; } catch (e) { continue; } } if (!found) { console.error('❌ Semgrep not found. Try: pip install --user --upgrade semgrep'); process.exit(1); }\"",
    "sast:semgrep:run": "node -e \"const { execSync } = require('child_process'); const configs = ['--config=auto', '--config=p/typescript', '--config=p/javascript', '--config=p/security-audit']; const args = configs.join(' '); const paths = ['semgrep', 'C:\\\\Users\\\\jeffr\\\\AppData\\\\Roaming\\\\Python\\\\Python313\\\\Scripts\\\\semgrep.exe']; let success = false; for (const path of paths) { try { execSync(`\\\"${path}\\\" ${args} --json --output=sast-results.json .`, { stdio: 'inherit' }); success = true; break; } catch (e) { continue; } } if (!success) { console.error('❌ Failed to run Semgrep'); process.exit(1); }\"",
    "sast:semgrep:verbose": "node -e \"const { execSync } = require('child_process'); const configs = ['--config=auto', '--config=p/typescript', '--config=p/javascript', '--config=p/security-audit']; const args = configs.join(' '); const paths = ['semgrep', 'C:\\\\Users\\\\jeffr\\\\AppData\\\\Roaming\\\\Python\\\\Python313\\\\Scripts\\\\semgrep.exe']; let success = false; for (const path of paths) { try { execSync(`\\\"${path}\\\" ${args} .`, { stdio: 'inherit' }); success = true; break; } catch (e) { continue; } } if (!success) { console.error('❌ Failed to run Semgrep'); process.exit(1); }\"",
    "sast:semgrep:basic": "node -e \"const { execSync } = require('child_process'); try { execSync('C:\\\\Users\\\\jeffr\\\\AppData\\\\Roaming\\\\Python\\\\Python313\\\\Scripts\\\\semgrep.exe --config=auto --severity=ERROR --severity=WARNING .', { stdio: 'inherit' }); } catch (e) { console.error('❌ Semgrep failed. Check if pysemgrep is properly installed.'); console.error('Try: pip uninstall semgrep && pip install semgrep --force-reinstall'); process.exit(1); }\"",
    "sast:semgrep:fix-path": "setx PATH \"%PATH%;C:\\Users\\jeffr\\AppData\\Roaming\\Python\\Python313\\Scripts\"",
    "sast:semgrep:reinstall": "pip uninstall -y semgrep && pip install --user semgrep --force-reinstall",
    "sast:semgrep:install": "pip install --user --upgrade semgrep",
    "sast:ci": "npm run sast:eslint:simple && npm run sast:semgrep:basic && echo 'SAST analysis complete.'",
    "lint:fix": "nx run-many --target=lint --all --fix"
  },
  "dependencies": {
    "@angular/animations": "19.2.13",
    "@angular/cdk": "^19.2.17",
    "@angular/common": "19.2.13",
    "@angular/compiler": "19.2.13",
    "@angular/core": "19.2.13",
    "@angular/forms": "19.2.13",
    "@angular/material": "^19.2.17",
    "@angular/platform-browser": "19.2.13",
    "@angular/platform-browser-dynamic": "19.2.13",
    "@angular/pwa": "~19.1.0",
    "@angular/router": "19.2.13",
    "@ckeditor/ckeditor5-angular": "^9.1.0",
    "@ckeditor/ckeditor5-build-classic": "^44.1.0",
    "@faker-js/faker": "^9.7.0",
    "@nestjs/axios": "^3.0.0",
    "@nestjs/common": "^10.0.0",
    "@nestjs/config": "^3.3.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/jwt": "^10.0.0",
    "@nestjs/mapped-types": "^2.1.0",
    "@nestjs/passport": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/platform-socket.io": "^10.0.0",
    "@nestjs/swagger": "^8.0.0",
    "@nestjs/terminus": "^10.0.0",
    "@nestjs/typeorm": "^10.0.0",
    "@nestjs/websockets": "^10.0.0",
    "@socket.io/admin-ui": "^0.5.1",
    "@tinymce/tinymce-angular": "^8.0.1",
    "@types/axios": "^0.9.36",
    "@types/helmet": "^0.0.48",
    "@types/jsdom": "^21.1.7",
    "@types/socket.io": "^3.0.1",
    "@typespec/compiler": "^1.4.0",
    "axios": "^1.7.9",
    "chalk": "^5.4.1",
    "chart.js": "^4.4.8",
    "check-disk-space": "^3.1.0",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.0",
    "concurrently": "^9.1.2",
    "d3": "^7.9.0",
    "esbuild": "~0.19.2",
    "fs-extra": "^11.3.0",
    "helmet": "^8.0.0",
    "highlight.js": "^11.11.1",
    "intersection-observer": "^0.12.2",
    "jsdom": "^26.0.0",
    "koa": "^3.0.0",
    "mammoth": "^1.9.0",
    "mapbox-gl": "^3.9.2",
    "markdown-it": "^14.1.0",
    "markdown-it-abbr": "^2.0.0",
    "markdown-it-anchor": "^9.2.0",
    "markdown-it-container": "^4.0.0",
    "markdown-it-deflist": "^3.0.0",
    "markdown-it-emoji": "^3.0.0",
    "markdown-it-footnote": "^4.0.0",
    "markdown-it-sub": "^2.0.0",
    "markdown-it-sup": "^2.0.0",
    "markdown-it-table-of-contents": "^0.9.0",
    "marked": "^15.0.7",
    "moment": "^2.30.1",
    "moment-timezone": "^0.5.47",
    "multer": "^2.0.0",
    "ngx-flag-icon-css": "^1.0.1",
    "ngx-spinner": "^19.0.0",
    "ngx-toastr": "^19.0.0",
    "passport": "^0.6.0",
    "passport-jwt": "^4.0.1",
    "pdfjs-dist": "^5.2.133",
    "reflect-metadata": "^0.1.13",
    "rxjs": "~7.8.0",
    "showdown": "^2.1.0",
    "socket.io": "^4.7.2",
    "socket.io-client": "^4.8.1",
    "swagger-ui-express": "^5.0.1",
    "tinymce": "^7.6.1",
    "turndown": "^7.2.0",
    "turndown-plugin-gfm": "^1.0.2",
    "typeorm": "^0.3.24",
    "zone.js": "0.15.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^19.1.0",
    "@angular-eslint/eslint-plugin": "^19.6.0",
    "@angular-eslint/eslint-plugin-template": "^19.6.0",
    "@angular-eslint/template-parser": "^19.6.0",
    "@angular/cli": "~19.1.0",
    "@angular/compiler-cli": "19.2.13",
    "@angular/language-service": "19.2.13",
    "@jridgewell/sourcemap-codec": "^1.5.0",
    "@nestjs/schematics": "^10.0.1",
    "@nestjs/testing": "^10.0.2",
    "@ngrx/eslint-plugin": "^19.2.0",
    "@nrwl/eslint-plugin-nx": "^19.8.4",
    "@nrwl/linter": "^19.8.4",
    "@nx/angular": "20.4.4",
    "@nx/devkit": "20.4.4",
    "@nx/esbuild": "20.4.4",
    "@nx/eslint": "20.4.4",
    "@nx/jest": "20.4.4",
    "@nx/js": "20.4.4",
    "@nx/module-federation": "20.4.4",
    "@nx/nest": "20.4.4",
    "@nx/playwright": "20.4.4",
    "@nx/vite": "20.4.4",
    "@nx/workspace": "20.4.4",
    "@playwright/test": "^1.49.1",
    "@swc-node/register": "~1.9.1",
    "@swc/core": "~1.5.7",
    "@swc/helpers": "~0.5.11",
    "@types/d3": "^7.4.3",
    "@types/fs-extra": "^11.0.4",
    "@types/jest": "^29.5.2",
    "@types/katex": "^0.16.7",
    "@types/mapbox-gl": "^3.4.1",
    "@types/markdown-it": "^14.1.2",
    "@types/markdown-it-container": "^2.0.10",
    "@types/multer": "^1.4.12",
    "@types/node": "^18.19.100",
    "@types/pdfjs-dist": "^2.10.377",
    "@types/showdown": "^2.0.6",
    "@types/socket.io-client": "^1.4.36",
    "@types/turndown": "^5.0.5",
    "@typescript-eslint/eslint-plugin": "^8.33.0",
    "@typescript-eslint/parser": "^8.33.0",
    "blessed": "^0.1.81",
    "blessed-contrib": "^4.11.0",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-nestjs": "^1.2.3",
    "eslint-plugin-ngrx": "^2.1.4",
    "eslint-plugin-rxjs": "^5.0.3",
    "jest": "^29.7.0",
    "jest-preset-angular": "^14.5.5",
    "npmlog": "^7.0.1",
    "nx": "20.4.4",
    "ora": "^6.0.0",
    "prettier": "^2.8.8",
    "puppeteer": "^22.15.0",
    "puppeteer-core": "^24.9.0",
    "rimraf": "^5.0.1",
    "sass": "^1.80.7",
    "sass-loader": "16.0.3",
    "stylelint": "^14.16.1",
    "stylelint-config-prettier": "^9.0.5",
    "stylelint-config-standard-scss": "^3.0.0",
    "stylelint-order": "^5.0.0",
    "stylelint-scss": "^4.7.0",
    "systeminformation": "^5.27.1",
    "trufflehog": "^0.0.5",
    "ts-jest": "^29.3.2",
    "ts-node": "10.9.1",
    "tslib": "^2.8.1",
    "typescript": "^5.6.3"
  },
  "overrides": {
    "@nestjs/terminus": {
      "@nestjs/common": "$@nestjs/common"
    }
  }
}
